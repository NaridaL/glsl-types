function Token(x: string | RegExp): { __isToken: true } {
	return x as any
}
const TO = {
	CONST: Token('const'),
	UNIFORM: Token('uniform'),
	LAYOUT: Token('layout'),
	CENTROID: Token('centroid'),
	FLAT: Token('flat'),
	SMOOTH: Token('smooth'),
	BREAK: Token('break'),
	CONTINUE: Token('continue'),
	DO: Token('do'),
	FOR: Token('for'),
	WHILE: Token('while'),
	SWITCH: Token('switch'),
	CASE: Token('case'),
	DEFAULT: Token('default'),
	IF: Token('if'),
	ELSE: Token('else'),
	IN: Token('in'),
	OUT: Token('out'),
	INOUT: Token('inout'),
	FLOAT: Token('float'),
	INT: Token('int'),
	VOID: Token('void'),
	BOOL: Token('bool'),
	TRUE: Token('true'),
	FALSE: Token('false'),
	INVARIANT: Token('invariant'),
	DISCARD: Token('discard'),
	RETURN: Token('return'),
	MAT2: Token('mat2'),
	MAT3: Token('mat3'),
	MAT4: Token('mat4'),
	MAT2X2: Token('mat2x2'),
	MAT2X3: Token('mat2x3'),
	MAT2X4: Token('mat2x4'),
	MAT3X2: Token('mat3x2'),
	MAT3X3: Token('mat3x3'),
	MAT3X4: Token('mat3x4'),
	MAT4X2: Token('mat4x2'),
	MAT4X3: Token('mat4x3'),
	MAT4X4: Token('mat4x4'),
	VEC2: Token('vec2'),
	VEC3: Token('vec3'),
	VEC4: Token('vec4'),
	IVEC2: Token('ivec2'),
	IVEC3: Token('ivec3'),
	IVEC4: Token('ivec4'),
	BVEC2: Token('bvec2'),
	BVEC3: Token('bvec3'),
	BVEC4: Token('bvec4'),
	UINT: Token('uint'),
	UVEC2: Token('uvec2'),
	UVEC3: Token('uvec3'),
	UVEC4: Token('uvec4'),
	LOWP: Token('lowp'),
	MEDIUMP: Token('mediump'),
	HIGHP: Token('highp'),
	PRECISION: Token('precision'),
	SAMPLER2D: Token('sampler2D'),
	SAMPLER3D: Token('sampler3D'),
	SAMPLERCUBE: Token('samplerCube'),
	SAMPLER2DSHADOW: Token('sampler2DShadow'),
	SAMPLERCUBESHADOW: Token('samplerCubeShadow'),
	SAMPLER2DARRAY: Token('sampler2DArray'),
	SAMPLER2DARRAYSHADOW: Token('sampler2DArrayShadow'),
	ISAMPLER2D: Token('isampler2D'),
	ISAMPLER3D: Token('isampler3D'),
	ISAMPLERCUBE: Token('isamplerCube'),
	ISAMPLER2DARRAY: Token('isampler2DArray'),
	USAMPLER2D: Token('usampler2D'),
	USAMPLER3D: Token('usampler3D'),
	USAMPLERCUBE: Token('usamplerCube'),
	USAMPLER2DARRAY: Token('usampler2DArray'),
	STRUCT: Token('struct'),
	IDENTIFIER: Token(/[_a-zA-Z][_a-zA-Z0-9]+/),
	INTCONSTANT: Token(/0[0-7]+[uU]?|0[xX][0-9a-fA-F]+|[1-9][0-9]*/),
	FLOATCONSTANT: Token(/(([0-9]+\.[0-9]*|\.[0-9]+)[eE][+-]?[0-9]+|[0-9]+[eE][+-]?[0-9]+)[fF]?/),

	LEFT_OP: Token('<<'),
	RIGHT_OP: Token('>>'),
	INC_OP: Token('++'),
	DEC_OP: Token('--'),
	LE_OP: Token('<='),
	GE_OP: Token('>='),
	EQ_OP: Token('=='),
	NE_OP: Token('!='),
	AND_OP: Token('&&'),
	OR_OP: Token('||'),
	XOR_OP: Token('^^'),
	MUL_ASSIGN: Token('*='),
	DIV_ASSIGN: Token('/='),
	ADD_ASSIGN: Token('+='),
	MOD_ASSIGN: Token('%='),
	LEFT_ASSIGN: Token('<<='),
	RIGHT_ASSIGN: Token('>>='),
	AND_ASSIGN: Token('&='),
	XOR_ASSIGN: Token('^='),
	OR_ASSIGN: Token('|='),
	SUB_ASSIGN: Token('-='),
	LEFT_PAREN: Token('('),
	RIGHT_PAREN: Token(')'),
	LEFT_BRACKET: Token('['),
	RIGHT_BRACKET: Token(']'),
	LEFT_BRACE: Token('{'),
	RIGHT_BRACE: Token('}'),
	DOT: Token('.'),
	COMMA: Token(','),
	COLON: Token(':'),
	EQUAL: Token('='),
	SEMICOLON: Token(';'),
	BANG: Token('!'),
	DASH: Token('-'),
	TILDE: Token('~'),
	PLUS: Token('+'),
	STAR: Token('*'),
	SLASH: Token('/'),
	PERCENT: Token('% '),
	LEFT_ANGLE: Token('<'),
	RIGHT_ANGLE: Token('>'),
	VERTICAL_BAR: Token('|'),
	CARET: Token('^'),
	AMPERSAND: Token('&'),
	QUESTION: Token('?'),
}